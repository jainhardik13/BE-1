----------------------------------------Node.js---------------------------------------------

Introduction:- 
- Node.js is open source, cross-platform, JavaScript runtime environment.
- Node applications can be developed using either JavaScript or typescript.
- Node.js was released by Ryan Dahl on 27th May 2009, at Netscape.
- The applications (servers) developed by Node.js are called 'Single Threaded Event Loop'

--------------------------------------------------------------------------------------------

- Node.js contain infinite event loop.
- This loop can handle two types of requests 
	- Non - blocking I/O requests.
	- Blocking I/O requests.
- Multiple clients requesting to server.
- these requests kept in Event queue.
- these requests sent to event loop.
- if the requests are non-blocking  I/O requests, response will be sent immediately to clients.
- if the requests are blocking I/O requests, those are sent to thread pool.
- thread pool will pass requests to databases or file systems (third parties).
- the response given by third parties will be in thread pool.
- the response from thread pool will be in event loop.
- event loop will give this response back to clients.

--------------------------------------------------------------------------------------------

-- HTTP
- This is the native module.
- This module is available along with 'Node Engine'.

--------------------------------------------------------------------------------------------

-- URL
- This is native module.
- This module is used to read get parameters in http servers.

--------------------------------------------------------------------------------------------

-- query-string 
- This is native module.
- This module is used to read the post parameters in http servers.

--------------------------------------------------------------------------------------------

-- fs
- This is native module.
- fs stands for 'File System'.
- This module is used to interact with flat files.
	- Eg :- txt, xml, json, etc

--------------------------------------------------------------------------------------------

-- Express
- This is third party module.
- This module is used to develop 'ReST APIs' (web services)
- ReST API :- Representational State Transfer Application Programming Interface.

--------------------------------------------------------------------------------------------

-- MySQL
- This is third party module.
- This module is used to interact with MySQL database.

--------------------------------------------------------------------------------------------

-- mongodb
- This is third party module.
- This module is used to interact with mongodb without schema.
- Note :- rules and regulations of db are called as schema.

--------------------------------------------------------------------------------------------

-- Mongoose
- This is third party module.
- This module is used to interact with mongodb with schema.

--------------------------------------------------------------------------------------------

-- mssql
- This is third party module.
- This module is used to interact SQL server.

--------------------------------------------------------------------------------------------

-- multer
- This is third party module.
- This module is used to upload images to server.

--------------------------------------------------------------------------------------------

-- Socket.io
- This is third party module.
- This module is used to develop chat applications.

--------------------------------------------------------------------------------------------

-- jwt-simple
- This is third party module.
- This module is used to generate tokens for authentication purpose.
- This system is technically called as token based authentication system.

--------------------------------------------------------------------------------------------

-- body-parser
- This is third party module.
- This module is used to set MIME type.

--------------------------------------------------------------------------------------------

-- cluster
- This is third party module.
- This module is used to implement child process in http server.
- Implementing child process is called as load balancing.

--------------------------------------------------------------------------------------------

-- express-cluster
- This third party module.
- This module is used to implement load balancing in ReST APIs.

--------------------------------------------------------------------------------------------

-- Cookie-parser
- This is third party module.
- This module is used to work with cookies.

--------------------------------------------------------------------------------------------

- We can download all third party modules by using either 'npm' or 'yarn' tool.
- 'npm' stands for Node packaging manager.
- 'yarn' is latest tool used to download node modules in faster manner as compared to 'npm'.
- 'yarn' tool given by facebook
- All node modules are downloaded to 'node_modules' directory in current path.


--------------------------------------------------------------------------------------------

https://shorturl.at/bw12r                                                  12 Dec 2024
  

G21 BEE
KickStart with Node.js https://shorturl.at/6DjNO 
Creating HTTP server
Passing Custom HTML response
  

=======================================================
Implementing HTTP Server
=======================================================
-        ‘http’ is the predefined module used to create http servers.
-        http is the native module, so no need to download it.
-        ‘require()’ is used to import.
-        Eg let http = require(‘http’)
-        ‘createServer()’ is the predefined function in http module.
-        This function is used to create the server.
-        The argument to createServer() is arrow function.
-        To this arrow function there are two arguments, ‘req’ and ‘res’.
-        request and response objects provided by node engine respectively.
-        req object is used to store client data.
-        res object is used to send response to client.
-        'writeHead(-,-)' is the predefined function in res object.
-        This function is used to set the MIME type.
-        First argument to this function is the status code (200 - ok).
-        Second argument is the JSON object.
-        JSON key is ‘content-type’ and the value is ‘text/html’.
-        ‘write(-)’ is the predefined function in res object.
-        This function is used to append response to res object.
-        ‘end()’ is the predefined function in res object.
-        This function is used to lock the response.




  



Task:- Getting Custom HTML response from http server
let resText = `Welcome to HTTP server`
let myRes = `
<!DOCTYPE html>
<Html>
    <head>
        <style>
            body
            {
                background-color: black;
            }
            h1{
                color: black;
                text-shadow: 0px 0px 2px red;
            }
        </style>
    </head>
    <body>
        <h1>${resText}</h1>
    </body>
</Html>
        `
//import http module
let http = require('http')
let server = http.createServer((req, res) => {
    //set MIME type
    res.writeHead(200, { 'content-type': 'text/html' })
    res.write(myRes)
    res.end()
})
//assign port no
server.listen(8080)
console.log('Server listening port no 8080')

-------------------------------------------------------------------------------------------------------------